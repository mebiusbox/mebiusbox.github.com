"use strict";(self.webpackChunkmebiusbox_docusaurus=self.webpackChunkmebiusbox_docusaurus||[]).push([[7690],{44673:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>d,metadata:()=>o,toc:()=>l});var i=t(85893),r=t(11151);t(38627);const d={title:"Keyhac",description:"Keyhac \u3092\u4f7f\u3063\u3066\u30ad\u30fc\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3084\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u62e1\u5f35\u3092\u884c\u3046\u65b9\u6cd5\u3092\u89e3\u8aac\u3057\u307e\u3059",keywords:["Keyhac"],pagination_next:null,pagination_prev:null,image:"https://og-image-mebiusbox.vercel.app/api/og?title=Keyhac&subtitle=Keyhac%20%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%AD%E3%83%BC%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%82%84%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97%E3%83%9C%E3%83%BC%E3%83%89%E6%8B%A1%E5%BC%B5%E3%82%92%E8%A1%8C%E3%81%86%E6%96%B9%E6%B3%95%E3%82%92%E8%A7%A3%E8%AA%AC%E3%81%97%E3%81%BE%E3%81%99&date=2023%2F01%2F01",last_update:{date:new Date("2023-01-20T00:00:00.000Z"),author:"mebiusbox"}},s=void 0,o={id:"note/keyhac",title:"Keyhac",description:"Keyhac \u3092\u4f7f\u3063\u3066\u30ad\u30fc\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3084\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u62e1\u5f35\u3092\u884c\u3046\u65b9\u6cd5\u3092\u89e3\u8aac\u3057\u307e\u3059",source:"@site/docs/note/keyhac.md",sourceDirName:"note",slug:"/note/keyhac",permalink:"/docs/note/keyhac",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Keyhac",description:"Keyhac \u3092\u4f7f\u3063\u3066\u30ad\u30fc\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3084\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u62e1\u5f35\u3092\u884c\u3046\u65b9\u6cd5\u3092\u89e3\u8aac\u3057\u307e\u3059",keywords:["Keyhac"],pagination_next:null,pagination_prev:null,image:"https://og-image-mebiusbox.vercel.app/api/og?title=Keyhac&subtitle=Keyhac%20%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%AD%E3%83%BC%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%82%84%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97%E3%83%9C%E3%83%BC%E3%83%89%E6%8B%A1%E5%BC%B5%E3%82%92%E8%A1%8C%E3%81%86%E6%96%B9%E6%B3%95%E3%82%92%E8%A7%A3%E8%AA%AC%E3%81%97%E3%81%BE%E3%81%99&date=2023%2F01%2F01",last_update:{date:"2023-01-20T00:00:00.000Z",author:"mebiusbox"}},sidebar:"main"},a={},l=[{value:"Keyhac \u3068\u306f",id:"keyhac-\u3068\u306f",level:2},{value:"Keyhac\u306e\u8a2d\u5b9a",id:"keyhac\u306e\u8a2d\u5b9a",level:2},{value:"\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762",id:"\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762",level:3},{value:"configure\u95a2\u6570",id:"configure\u95a2\u6570",level:3},{value:"\u30a8\u30c7\u30a3\u30bf\u306e\u8a2d\u5b9a",id:"\u30a8\u30c7\u30a3\u30bf\u306e\u8a2d\u5b9a",level:3},{value:"\u30d5\u30a9\u30f3\u30c8\u306e\u8a2d\u5b9a",id:"\u30d5\u30a9\u30f3\u30c8\u306e\u8a2d\u5b9a",level:3},{value:"\u30c6\u30fc\u30de\u306e\u8a2d\u5b9a",id:"\u30c6\u30fc\u30de\u306e\u8a2d\u5b9a",level:3},{value:"\u30ad\u30fc\u306e\u518d\u767b\u9332",id:"\u30ad\u30fc\u306e\u518d\u767b\u9332",level:3},{value:"\u30b0\u30ed\u30fc\u30d0\u30eb\u30ad\u30fc\u30de\u30c3\u30d7",id:"\u30b0\u30ed\u30fc\u30d0\u30eb\u30ad\u30fc\u30de\u30c3\u30d7",level:3},{value:"\u521d\u671f\u306e\u8a2d\u5b9a",id:"\u521d\u671f\u306e\u8a2d\u5b9a",level:3},{value:"Keyhac\u30e2\u30b8\u30e5\u30fc\u30eb",id:"keyhac\u30e2\u30b8\u30e5\u30fc\u30eb",level:3},{value:"\u5b9f\u88c5\u3057\u305f\u6a5f\u80fd\u306e\u7d39\u4ecb",id:"\u5b9f\u88c5\u3057\u305f\u6a5f\u80fd\u306e\u7d39\u4ecb",level:2},{value:"\u30ab\u30fc\u30bd\u30eb\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u4e2d\u592e\u306b\u79fb\u52d5\u3059\u308b",id:"\u30ab\u30fc\u30bd\u30eb\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u4e2d\u592e\u306b\u79fb\u52d5\u3059\u308b",level:3},{value:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u4e2d\u592e\u306b\u79fb\u52d5\u3059\u308b",id:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u4e2d\u592e\u306b\u79fb\u52d5\u3059\u308b",level:3},{value:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ab\u30fc\u30bd\u30eb\u4f4d\u7f6e\u306b\u79fb\u52d5\u3059\u308b",id:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ab\u30fc\u30bd\u30eb\u4f4d\u7f6e\u306b\u79fb\u52d5\u3059\u308b",level:3},{value:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5207\u308a\u66ff\u3048\u308b",id:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5207\u308a\u66ff\u3048\u308b",level:3},{value:"\u30d6\u30e9\u30a6\u30b6(Chrome)\u3092\u5207\u308a\u66ff\u3048\u308b",id:"\u30d6\u30e9\u30a6\u30b6chrome\u3092\u5207\u308a\u66ff\u3048\u308b",level:3},{value:"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b",id:"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b",level:3},{value:"VSCode\u306e\u9078\u629e\u7bc4\u56f2\u62e1\u5927(x2)",id:"vscode\u306e\u9078\u629e\u7bc4\u56f2\u62e1\u5927x2",level:3},{value:"\u30de\u30eb\u30c1\u30b9\u30c8\u30ed\u30fc\u30af\u30ad\u30fc",id:"\u30de\u30eb\u30c1\u30b9\u30c8\u30ed\u30fc\u30af\u30ad\u30fc",level:3},{value:"\u65e5\u672c\u8a9e\u5165\u529b\u6642\u306b\u534a\u89d2\u306e\u62ec\u5f27\u3092\u5165\u308c\u308b",id:"\u65e5\u672c\u8a9e\u5165\u529b\u6642\u306b\u534a\u89d2\u306e\u62ec\u5f27\u3092\u5165\u308c\u308b",level:3},{value:"\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30bf\u30eb\u30b5\u30fc\u30c1",id:"\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30bf\u30eb\u30b5\u30fc\u30c1",level:3},{value:"\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8",id:"\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8",level:3},{value:"\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u5c65\u6b74",id:"\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u5c65\u6b74",level:3},{value:"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb",id:"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"keyhac-\u3068\u306f",children:"Keyhac \u3068\u306f"}),"\n",(0,i.jsx)(n.p,{children:"Keyhac \u3068\u306f\u3001Python \u3092\u4f7f\u3063\u3066\u30ad\u30fc\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u304c\u884c\u3048\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\uff0e"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://sites.google.com/site/craftware/keyhac-ja",children:"https://sites.google.com/site/craftware/keyhac-ja"})}),"\n",(0,i.jsxs)(n.p,{children:["\u5b9a\u578b\u6587\u5165\u529b\u3092\u30b9\u30cb\u30da\u30c3\u30c8\u306e\u3088\u3046\u306b\u5165\u529b\u3067\u304d\u308b\u30c4\u30fc\u30eb\u3068\u3057\u3066\u3001 ",(0,i.jsx)(n.a,{href:"https://www.trankynam.com/atext/",children:"aText"})," \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\uff0e\u7121\u6599\u3067\u3082\u5358\u7d14\u306a\u5b9a\u578b\u6587\u306f\u5165\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u30d5\u30eb\u6a5f\u80fd\u3092\u4f7f\u3046\u305f\u3081\u306b\u306fPro\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u6709\u6599\u3067\u3059\uff0e\u305d\u3093\u306a\u306b\u983b\u7e41\u306b\u5229\u7528\u3059\u308b\u308f\u3051\u3067\u3082\u306a\u3044\u3067\u3059\u3057\u3001\u3068\u308a\u3042\u3048\u305a\u4ed6\u306e\u65b9\u6cd5\u3067\u3067\u304d\u306a\u3044\u304b\u3068\u63a2\u3057\u3066\u3044\u305f\u3068\u3053\u308d\u3001Keyhac\u306b\u305f\u3069\u308a\u7740\u304d\u307e\u3057\u305f\uff0e"]}),"\n",(0,i.jsxs)(n.p,{children:["Keyhac \u306e\u3044\u3044\u3068\u3053\u308d\u306f Python \u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3068\u3053\u308d\u306b\u3042\u308a\u307e\u3059\uff0e\u4ee5\u524d\u306f ",(0,i.jsx)(n.a,{href:"http://keijiweb.com/software.html",children:"Charu3"})," \u3092\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\uff0e\u30de\u30af\u30ed\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u305f\u308a\u30d7\u30e9\u30b0\u30a4\u30f3\u3082\u3042\u308b\u306e\u3067\u3001\u3042\u308b\u7a0b\u5ea6\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u304c\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u3084\u306f\u308a\u9650\u754c\u304c\u3042\u308a\u307e\u3059\uff0ePython \u304c\u4f7f\u3048\u308b\u306a\u3089\u3001\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u4ee5\u5916\u306e\u3053\u3068\u3082\u3044\u308d\u3044\u308d\u3067\u304d\u308b\u306e\u3067\u6c4e\u7528\u6027\u306f\u9ad8\u3044\u3067\u3059\uff0e"]}),"\n",(0,i.jsx)(n.h2,{id:"keyhac\u306e\u8a2d\u5b9a",children:"Keyhac\u306e\u8a2d\u5b9a"}),"\n",(0,i.jsxs)(n.p,{children:["Keyhac\u306e\u8a2d\u5b9a\u65b9\u6cd5\u3092\u89e3\u8aac\u3057\u307e\u3059\uff0e\u74b0\u5883\u306f Windows \u3067\u3059\uff0e\n\u307e\u305a\u3001Keyhac\u3092\u8d77\u52d5\u3059\u308b\u3068\u30b7\u30b9\u30c6\u30e0\u30c8\u30ec\u30a4\u306b\u5e38\u99d0\u3057\u307e\u3059\uff0e\u30b7\u30b9\u30c6\u30e0\u30c8\u30ec\u30a4\u304b\u3089Keyhac\u30a2\u30a4\u30b3\u30f3\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3066\u3001",(0,i.jsx)(n.code,{children:"\u8a2d\u5b9a\u306e\u7de8\u96c6"}),"\u3092\u9078\u629e\u3059\u308b\u3068\u3001\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb(",(0,i.jsx)(n.code,{children:"config.py"}),")\u304c\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u304b\u308c\u307e\u3059\uff0e\u3053\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3057\u3066\u3001\u30b7\u30b9\u30c6\u30e0\u30c8\u30ec\u30a4\u304b\u3089\u53f3\u30af\u30ea\u30c3\u30af\u3001",(0,i.jsx)(n.code,{children:"\u8a2d\u5b9a\u306e\u30ea\u30ed\u30fc\u30c9"}),"\u3067\u53cd\u6620\u3055\u308c\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.h3,{id:"\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762",children:"\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762"}),"\n",(0,i.jsxs)(n.p,{children:["\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u554f\u984c\u304c\u3042\u3063\u305f\u308a\u3001\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff0e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304b\u3089 ",(0,i.jsx)(n.code,{children:"print"})," \u3059\u308b\u3068\u3001\u3053\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff0e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30b7\u30b9\u30c6\u30e0\u30c8\u30ec\u30a4\u306eKeyhac\u30a2\u30a4\u30b3\u30f3\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u8868\u793a\u3055\u308c\u307e\u3059\uff0e\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762\u3092\u30af\u30ea\u30a2\u3057\u305f\u3044\u5834\u5408\u3001\u30b7\u30b9\u30c6\u30e0\u30c8\u30ec\u30a4\u304b\u3089Keyhac\u30a2\u30a4\u30b3\u30f3\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3066",(0,i.jsx)(n.code,{children:"\u7aef\u672b\u306e\u30af\u30ea\u30a2"}),"\u3092\u9078\u629e\u3057\u307e\u3059\uff0e\u307e\u305f\u3001",(0,i.jsx)(n.code,{children:"\u5185\u90e8\u30ed\u30b0\u3092ON"}),"\u3092\u9078\u629e\u3059\u308b\u3068\u3001\u30ed\u30b0\u60c5\u5831\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u753b\u9762\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e\u7121\u52b9\u306b\u3057\u305f\u3044\u3068\u304d\u306f",(0,i.jsx)(n.code,{children:"\u5185\u90e8\u30ed\u30b0\u3092OFF"}),"\u3092\u9078\u629e\u3057\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.h3,{id:"configure\u95a2\u6570",children:"configure\u95a2\u6570"}),"\n",(0,i.jsxs)(n.p,{children:["Keyhac\u3092\u8d77\u52d5\u3059\u308b\u3068\u3001\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb(",(0,i.jsx)(n.code,{children:"config.py"}),")\u306b\u3042\u308b",(0,i.jsx)(n.code,{children:"configure"}),"\u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\uff0e\u3053\u3053\u306b\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u3066\u304d\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.h3,{id:"\u30a8\u30c7\u30a3\u30bf\u306e\u8a2d\u5b9a",children:"\u30a8\u30c7\u30a3\u30bf\u306e\u8a2d\u5b9a"}),"\n",(0,i.jsx)(n.p,{children:"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u7de8\u96c6\u306b\u4f7f\u3046\u30a8\u30c7\u30a3\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0eVisual Studio Code\u306f\u958b\u304f\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\uff0e"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'keymap.editor = "code"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u30d5\u30a9\u30f3\u30c8\u306e\u8a2d\u5b9a",children:"\u30d5\u30a9\u30f3\u30c8\u306e\u8a2d\u5b9a"}),"\n",(0,i.jsx)(n.p,{children:"\u30b3\u30f3\u30bd\u30fc\u30eb\u306a\u3069\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8868\u793a\u3055\u308c\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u6307\u5b9a\u3057\u307e\u3059\uff0e\u597d\u304d\u306a\u30d5\u30a9\u30f3\u30c8\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u30d5\u30a9\u30f3\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u8d77\u52d5\u306b\u5c11\u3057\u6642\u9593\u304c\u304b\u304b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'keymap.setFont("Iosevka", 16)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u30c6\u30fc\u30de\u306e\u8a2d\u5b9a",children:"\u30c6\u30fc\u30de\u306e\u8a2d\u5b9a"}),"\n",(0,i.jsxs)(n.p,{children:["\u6a19\u6e96\u3067\u306f ",(0,i.jsx)(n.code,{children:"white"})," \u3068 ",(0,i.jsx)(n.code,{children:"black"})," \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'keymap.setTheme("black")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u30ad\u30fc\u306e\u518d\u767b\u9332",children:"\u30ad\u30fc\u306e\u518d\u767b\u9332"}),"\n",(0,i.jsxs)(n.p,{children:["Keyhac\u3067\u306f\u30ad\u30fc\u3092\u5225\u306e\u30ad\u30fc\u306b\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u305d\u308c\u306b\u306f",(0,i.jsx)(n.code,{children:"keymap.replaceKey"}),"\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059\uff0e\u79c1\u306e\u5834\u5408\u3001",(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"\u5909\u63db\u30ad\u30fc"}),"\u3092\u9069\u5f53\u306a\u5834\u6240\u306b\u518d\u5272\u308a\u5f53\u3066\u3057\u3001\u30e6\u30fc\u30b6\u30fc\u4fee\u98fe\u30ad\u30fc\u3068\u3057\u3066\u305d\u308c\u3089\u3092\u767b\u9332\u3057\u307e\u3059\uff0e\u30e6\u30fc\u30b6\u30fc\u4fee\u98fe\u30ad\u30fc\u306e\u767b\u9332\u306f ",(0,i.jsx)(n.code,{children:"keymap.defineModifier"}),"\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'# Key replacement\nkeymap.replaceKey("(29)", 235)  # \u7121\u5909\u63db\nkeymap.replaceKey("(28)", 236)  # \u5909\u63db\n\n# User modifier key definition\nkeymap.defineModifier(235, "User0")\nkeymap.defineModifier(236, "User1")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u30b0\u30ed\u30fc\u30d0\u30eb\u30ad\u30fc\u30de\u30c3\u30d7",children:"\u30b0\u30ed\u30fc\u30d0\u30eb\u30ad\u30fc\u30de\u30c3\u30d7"}),"\n",(0,i.jsxs)(n.p,{children:["Keyhac\u3067\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u3054\u3068\u306b\u30ad\u30fc\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3057\u3001\u3059\u3079\u3066\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u5bfe\u3057\u3066\u30ad\u30fc\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\uff0e\u5f8c\u8005\u306e\u5834\u5408\u3001",(0,i.jsx)(n.code,{children:"keymap.defineWindowKeymap"}),"\u30e1\u30bd\u30c3\u30c9\u3067\u53d6\u5f97\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u8a2d\u5b9a\u3057\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"# Global keymap which affects any windows\nkeymap_global = keymap.defineWindowKeymap()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u4f8b\u3048\u3070\u3001",(0,i.jsx)(n.code,{children:"Shift"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"Z"}),"\u30ad\u30fc\u3092\u540c\u6642\u306b\u62bc\u3057\u305f\u3068\u304d\u306e\u51e6\u7406\u3092\u8a2d\u5b9a\u3057\u305f\u3044\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'keymap_global["S-Z"] = closure\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u30ad\u30fc\u306b\u5bfe\u5fdc\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u6307\u5b9a\u3057\u307e\u3059\uff0eKeyhac\u306f\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b\u5bfe\u5fdc\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\uff0e"}),"\n",(0,i.jsxs)(n.p,{children:["\u6307\u5b9a\u3067\u304d\u308b\u30ad\u30fc\u3084\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u306b\u3064\u3044\u3066\u306f",(0,i.jsx)(n.a,{href:"https://crftwr.github.io/keyhac/mac/doc/ja/",children:"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8"}),"\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e"]}),"\n",(0,i.jsx)(n.h3,{id:"\u521d\u671f\u306e\u8a2d\u5b9a",children:"\u521d\u671f\u306e\u8a2d\u5b9a"}),"\n",(0,i.jsx)(n.p,{children:"Keyhac\u3067\u306f\u6a19\u6e96\u3067\u3044\u304f\u3064\u304b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u307e\u305a\u306f\u5168\u90e8\u6d88\u3059\u304b\u3001\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff0e"}),"\n",(0,i.jsx)(n.h3,{id:"keyhac\u30e2\u30b8\u30e5\u30fc\u30eb",children:"Keyhac\u30e2\u30b8\u30e5\u30fc\u30eb"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pyauto"}),"\u3068",(0,i.jsx)(n.code,{children:"keyhac"}),"\u306fKeyhac\u306b\u7528\u610f\u3055\u308c\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059\uff0e",(0,i.jsx)(n.code,{children:"pyauto"}),"\u306f\u4f4e\u30ec\u30d9\u30ebOS\u6a5f\u80fd\u3067\u3001",(0,i.jsx)(n.code,{children:"keyhac"}),"\u306f\u305d\u308c\u4ee5\u5916\u306e\u3082\u306e\u3067\u3059\uff0e\u4f8b\u3048\u3070\u3001\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u3092\u64cd\u4f5c\u3059\u308b\u5834\u5408\u3001",(0,i.jsx)(n.code,{children:"keyhac"})," \u306e ",(0,i.jsx)(n.code,{children:"setClipboardText"}),", ",(0,i.jsx)(n.code,{children:"getClipboardText"})," \u3092\u4f7f\u3044\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"from keyhac import setClipboardText, getClipboardText\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u9762\u5012\u306a\u3089\u3001\u4e00\u62ec\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\uff0e"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"from keyhac import *\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u3053\u308c\u3089\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3064\u3044\u3066\u3001\u8a73\u3057\u304f\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e"}),"\n",(0,i.jsx)(n.p,{children:"Keyhac\u3092\u4f7f\u3063\u3066 emacs \u30e9\u30a4\u30af\u306a\u30ad\u30fc\u64cd\u4f5c\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u65b9\u304c\u3044\u307e\u3059\uff0e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3082\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\uff0e"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/smzht/fakeymacs",children:"https://github.com/smzht/fakeymacs"})}),"\n",(0,i.jsx)(n.h2,{id:"\u5b9f\u88c5\u3057\u305f\u6a5f\u80fd\u306e\u7d39\u4ecb",children:"\u5b9f\u88c5\u3057\u305f\u6a5f\u80fd\u306e\u7d39\u4ecb"}),"\n",(0,i.jsx)(n.p,{children:"\u305d\u308c\u3067\u306f\u3001\u6b21\u304b\u3089\u5177\u4f53\u7684\u306a\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u3068\u3044\u3063\u3066\u3082\u3001\u3042\u307e\u308a\u4f7f\u3044\u3053\u306a\u3057\u3066\u3044\u308b\u8a33\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u60aa\u3057\u304b\u3089\u305a\uff0e\n\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u306f\u3001\u305d\u308c\u305e\u308c\u521d\u51fa\u3057\u305f\u5834\u6240\u306b\u660e\u8a18\u3057\u3066\u3044\u307e\u3059\uff0e"}),"\n",(0,i.jsx)(n.h3,{id:"\u30ab\u30fc\u30bd\u30eb\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u4e2d\u592e\u306b\u79fb\u52d5\u3059\u308b",children:"\u30ab\u30fc\u30bd\u30eb\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u4e2d\u592e\u306b\u79fb\u52d5\u3059\u308b"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Shift"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"\u53f3Ctrl"}),"\u30ad\u30fc\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u5b9f\u884c\u3057\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'def set_cursor_pos(x, y):\n    keymap.beginInput()\n    keymap.input_seq.append(pyauto.MouseMove(x, y))\n    keymap.endInput()\n\ndef cursor_to_center():\n    wnd = keymap.getTopLevelWindow()\n    wnd_left, wnd_top, wnd_right, wnd_bottom = wnd.getRect()\n    to_x = int((wnd_left + wnd_right) / 2)\n    to_y = int((wnd_bottom + wnd_top) / 2)\n    set_cursor_pos(to_x, to_y)\n\nkeymap_global["S-RCtrl"] = cursor_to_center\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u4e2d\u592e\u306b\u79fb\u52d5\u3059\u308b",children:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u4e2d\u592e\u306b\u79fb\u52d5\u3059\u308b"}),"\n",(0,i.jsxs)(n.p,{children:["\u5de6\u53f3\u306e",(0,i.jsx)(n.code,{children:"Ctrl"}),"\u30ad\u30fc\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u5b9f\u884c\u3057\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'def delay(sec=0.05):\n    time.sleep(sec)\n\ndef get_monitor_areas():\n    monitors = pyauto.Window.getMonitorInfo()\n    main_monitor_first = sorted(monitors, key=lambda x: x[2], reverse=True)\n    non_taskbar_areas = list(map(lambda x: x[1], main_monitor_first))\n    return non_taskbar_areas\n\ndef set_window_rect(rect):\n    wnd = keymap.getTopLevelWindow()\n    if list(wnd.getRect()) == rect:\n        wnd.maximize()\n    else:\n        if wnd.isMaximized():\n            wnd.restore()\n            delay()\n        wnd.setRect(rect)\n\ndef window_to_center():\n    wnd = keymap.getTopLevelWindow()\n    if wnd.isMaximized():\n        return None\n    wnd_left, wnd_top, wnd_right, wnd_bottom = wnd.getRect()\n    width = wnd_right - wnd_left\n    height = wnd_bottom - wnd_top\n    mntr_left, mntr_top, mntr_right, mntr_bottom = get_monitor_areas()[0]\n    center_h = (mntr_right - mntr_left) / 2\n    center_v = (mntr_bottom - mntr_top) / 2\n    lx = int(center_h - width / 2)\n    ly = int(center_v - height / 2)\n    to_rect = (lx, ly, lx + width, ly + height)\n    set_window_rect(to_rect)\n\nkeymap_global["C-RCtrl"] = window_to_center\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u3082\u3057\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u5148\u306b\u901a\u5e38\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u623b\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\uff0e"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"def window_to_center_force():\n    wnd = keymap.getTopLevelWindow()\n    if wnd.isMaximized():\n        wnd.restore()\n        delay()\n    window_to_center()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ab\u30fc\u30bd\u30eb\u4f4d\u7f6e\u306b\u79fb\u52d5\u3059\u308b",children:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ab\u30fc\u30bd\u30eb\u4f4d\u7f6e\u306b\u79fb\u52d5\u3059\u308b"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"\u53f3Ctrl"}),"\u30ad\u30fc\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u5b9f\u884c\u3057\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'def window_to_cursor():\n    wnd = keymap.getTopLevelWindow()\n    if wnd.isMaximized():\n        return None\n    wnd_left, wnd_top, wnd_right, wnd_bottom = wnd.getRect()\n    width = wnd_right - wnd_left\n    height = wnd_bottom - wnd_top\n    x, y = pyauto.Input.getCursorPos()\n    to_rect = (x, y, x + width, y + height)\n    set_window_rect(to_rect)\n\nkeymap_global["U0-RCtrl"] = window_to_cursor\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5207\u308a\u66ff\u3048\u308b",children:"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5207\u308a\u66ff\u3048\u308b"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Alt+Tab"}),"\u3084",(0,i.jsx)(n.code,{children:"Win+Tab"}),"\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3067\u3059\uff0eKeyhac\u3067\u306f\u30ea\u30b9\u30c8\u3092\u8868\u793a\u3059\u308b\u30a6\u30a3\u30f3\u30c9\u30a6\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u4f7f\u3044\u307e\u3059\uff0e\u4eca\u56de\u306f\u3001",(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"\u30b9\u30da\u30fc\u30b9"}),"\u30ad\u30fc\u3092\u62bc\u3057\u305f\u3068\u304d\u306b\u5b9f\u884c\u3057\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"{47} showLineNumbers",children:'# import re\n# from keyhac import cblister_FixedPhrase\ndebug_mode = False # \u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u3092\u6709\u52b9\u306b\u3059\u308b\u5834\u5408\u306f True \u306b\u3059\u308b\ndef dbg(text):\n    if debug_mode:\n        print("dbg: " + text)\n\ndef truncate(string, length, ellipsis="..."):\n    return string[:length] + (ellipsis if string[length:] else "")\n\ndef truncate_cjk(string, length, ellipsis="..."):\n    # http://www.unicode.org/reports/tr11/\n    count = 0\n    text = ""\n    for c in string:\n        if unicodedata.east_asian_width(c) in "FWA":\n            count += 2\n        else:\n            count += 1\n\n        if count > length:\n            text += ellipsis\n            break\n        text += c\n    return text\n\ndef switch_windows():\n    dbg(">>>>> switch_windows <<<<<")\n\n    def popWindowList():\n        # If the list window is already opened, just close it\n        if keymap.isListWindowOpened():\n            keymap.cancelListWindow()\n            return\n\n        def getWindowList(wnd, arg):\n            if not wnd.isVisible():\n                return True\n            # if not wnd.getOwner():\n            #     return True\n            if wnd.getText() == "":\n                return True\n            dbg(wnd.getProcessName())\n            dbg("  " + wnd.getClassName())\n            dbg("    " + wnd.getText())\n            if re.match(\n                r"(keyhac|SystemSettings|ApplicationFrameHost|TextInputHost|explorer|onenoteim)\\.exe",\n                wnd.getProcessName(),\n            ):\n                dbg("(pass)")\n                return True\n            # if re.match(r"chrome", wnd.getClassName()):\n            #     window_list.append(wnd)\n            window_list.append(wnd)\n            return True\n\n        window_list = []\n        Window.enum(getWindowList, None)\n\n        popup_list = [\n            ("{:>20s} :: {}".format(truncate(i.getProcessName()[:-4], 17), truncate_cjk(i.getText(), 45)), i)\n            for i in sorted(window_list, key=lambda x: x.getProcessName())\n        ]\n\n        if mysetting.debug:\n            for i in popup_list:\n                dbg(i[0])\n\n        listers = [("Windows", cblister_FixedPhrase(popup_list))]\n        item, mod = keymap.popListWindow(listers)\n        if item:\n            item[1].setForeground()\n\n    # Because the blocking procedure cannot be executed in the key-hook,\n    # delayed-execute the procedure by delayedCall().\n    keymap.delayedCall(popWindowList, 0)\n\nkeymap_global["U0-Space"] = switch_windows\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(41038).Z+"",width:"868",height:"179"})}),"\n",(0,i.jsx)(n.p,{children:"\u6b63\u898f\u8868\u73fe(Line:47)\u3092\u4f7f\u3063\u3066\u8868\u793a\u3055\u308c\u308b\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5236\u9650\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff0e"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["\u3061\u306a\u307f\u306b\u3001\u4ee5\u524d\u306f",(0,i.jsx)(n.a,{href:"http://frostmoon.sakura.ne.jp/Tascher/",children:"Tascher"}),"\u3068\u3044\u3046\u306e\u3092\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001Keyhac\u306b\u7f6e\u304d\u63db\u3048\u307e\u3057\u305f\uff0e"]})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Keyhac\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u6a5f\u80fd\u306f\u3001\u5b9f\u306f\u8907\u6570\u306e\u30ea\u30b9\u30c8\u3092\u5185\u90e8\u3067\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u3042\u308b\u3088\u3046\u306b\u3001",(0,i.jsx)(n.code,{children:"listers"}),"\u306b\u914d\u5217\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'listers = [("Windows", cblister_FixedPhrase(popup_list))]\n'})}),(0,i.jsx)(n.p,{children:"\u8907\u6570\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5de6\u53f3\u30ad\u30fc\u3067\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e"})]}),"\n",(0,i.jsx)(n.h3,{id:"\u30d6\u30e9\u30a6\u30b6chrome\u3092\u5207\u308a\u66ff\u3048\u308b",children:"\u30d6\u30e9\u30a6\u30b6(Chrome)\u3092\u5207\u308a\u66ff\u3048\u308b"}),"\n",(0,i.jsxs)(n.p,{children:["Chrome\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6b21\u3005\u306b\u5207\u308a\u66ff\u3048\u308b\u6a5f\u80fd\u3067\u3059\uff0e",(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"F7"}),"\u30ad\u30fc\u306b\u5272\u308a\u5f53\u3066\u3066\u3044\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'# import time\n# from keyhac import Window\nchrome_history = []\ndef next_chrome_window():\n    dbg(">>>>> next_chrome_window <<<<<")\n\n    def getWindowList(wnd, arg):\n        if not wnd.isVisible():\n            return True\n        # if not wnd.getOwner():\n        #     return True\n        if wnd.getText() == "":\n            return True\n        # dbg(wnd.getProcessName())\n        if re.match(r"chrome", wnd.getProcessName()):\n            window_list.append(wnd)\n        # if re.match(r"chrome", wnd.getClassName()):\n        #     window_list.append(wnd)\n        # window_list.append(wnd)\n        return True\n\n    now = time.time_ns() / 1_000_000  # ms\n    history = sorted(chrome_history, key=lambda x: x[1], reverse=True)\n    if len(history) > 0:\n        dbg("{}".format(now - history[0][1]))\n        if now - history[0][1] > 5_000:  # 5s\n            dbg("clear chrome history")\n            chrome_history = []\n            history = []\n\n    if debug:\n        for entry in history:\n            dbg(f"{entry[0]}, {entry[1]}")\n\n    next_window = (None, -1)\n    window_list = []\n    Window.enum(getWindowList, None)\n    current_wnd_text = keymap.getTopLevelWindow().getText()\n    dbg(f"[current] {current_wnd_text}")\n    for wnd in window_list:\n        text = wnd.getText()\n        if current_wnd_text == text:\n            continue\n        idx = [i for i, e in enumerate(history) if e[0] == text]\n        if len(idx) > 0:\n            if next_window[1] < idx[0]:\n                dbg(f"found in history: {text}({idx[0]})")\n                next_window = (wnd, idx[0])\n        else:\n            dbg(f"not found in history: {text}")\n            next_window = (wnd, len(history))\n            break\n\n    if next_window[0]:\n        dbg("[next] " + next_window[0].getText())\n        chrome_history.append((next_window[0].getText(), now))\n        next_window[0].setForeground()\n\nkeymap_global["U0-F7"] = next_chrome_window\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b",children:"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"keymap.ShellExecuteCommand"}),"\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"keymap.ShellExecuteCommand(verb, file, param, directory, swmode);\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u79c1\u306f\u6b21\u306e\u3088\u3046\u306a\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u4f7f\u3063\u3066\u3044\u307e\u3059\uff0e"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'def shell(s, arg=None):\n    return keymap.ShellExecuteCommand(None, s, arg, None)\n\ndef shell_mini(s, arg=None):\n    return keymap.ShellExecuteCommand(None, s, arg, None, "minimized")\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u4f8b\u3048\u3070\u3001Chrome\u3067\u7279\u5b9a\u306eURL\u3092\u958b\u304d\u305f\u3044\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\uff0e"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'keymap_global["U0-F9"] = shell(\n    "C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\Chrome.exe",\n    "--new-window https://www.google.com/webhp?hl=ja",\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"vscode\u306e\u9078\u629e\u7bc4\u56f2\u62e1\u5927x2",children:"VSCode\u306e\u9078\u629e\u7bc4\u56f2\u62e1\u5927(x2)"}),"\n",(0,i.jsxs)(n.p,{children:["Visual Studio Code \u3067 ",(0,i.jsx)(n.code,{children:"Shift+Alt+\u53f3"}),"\u30ad\u30fc\u306f\u9078\u629e\u7bc4\u56f2\u306e\u62e1\u5927\u306b\u306a\u308a\u307e\u3059\uff0e\u3061\u3087\u3046\u30692\u56de\u5b9f\u884c\u3059\u308b\u3068\u3001\u3044\u3044\u611f\u3058\u306b\u9078\u629e\u3067\u304d\u308b\u3053\u3068\u304c\u591a\u3044\u305f\u3081\u91cd\u5b9d\u3057\u3066\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\u3001",(0,i.jsx)(n.code,{children:"Shift+Alt+\u53f3"}),"\u30ad\u30fc\u306f\u62bc\u3057\u3065\u3089\u3044\u3067\u3059\uff0e\u305d\u3053\u3067\u3001",(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"\u53f3"}),"\u30ad\u30fc\u62bc\u3057\u30672\u56de\u5206\u306e",(0,i.jsx)(n.code,{children:"Shift+Alt+\u53f3"}),"\u30ad\u30fc\u3092\u62bc\u3059\u3088\u3046\u306b\u3057\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'def ikey(*keys):\n    return keymap.InputKeyCommand(*keys)\n\nkeymap_global["U0-Right"] = ikey("S-A-Right", "S-A-Right")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u30de\u30eb\u30c1\u30b9\u30c8\u30ed\u30fc\u30af\u30ad\u30fc",children:"\u30de\u30eb\u30c1\u30b9\u30c8\u30ed\u30fc\u30af\u30ad\u30fc"}),"\n",(0,i.jsxs)(n.p,{children:["Keyhac\u3067\u306f\u30de\u30eb\u30c1\u30b9\u30c8\u30ed\u30fc\u30af\u30ad\u30fc\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\uff0e",(0,i.jsx)(n.code,{children:"keymap.defineMultiStrokeKeymap"}),"\u3067\u6700\u521d\u306e\u30ad\u30fc\u3092\u767b\u9332\u3057\u307e\u3059\uff0e\u4f8b\u3048\u3070\u3001",(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"D"}),"\u30ad\u30fc\u3092\u62bc\u3057\u3066\u3001\u65e5\u4ed8\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u3066\u5165\u529b\u3057\u305f\u3044\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'def send_keys(*keys):\n    keymap.beginInput()\n    for key in keys:\n        keymap.setInput_FromString(str(key))\n    keymap.endInput()\n    keymap._fixFunnyModifierState()\n\ndef set_ime(mode):\n    if keymap.getWindow().getImeStatus() != mode:\n        send_keys("(243)")\n        delay(0.01)\n\ndef input_date(fmt):\n    def _input_data():\n        d = datetime.datetime.today()\n        date_str = d.strftime(fmt)\n        set_ime(0)\n        send_input(date_str, 0)\n\n    return _input_data\n\nkeymap_global["U0-D"] = keymap.defineMultiStrokeKeymap("DATE: [1]YMD, [2]Y/M/D, [3]Y-M-D")\nfor key, args in {\n    "1": ["%Y%m%d"],\n    "2": ["%Y/%m/%d"],\n    "3": ["%Y-%m-%d"],\n}.items():\n    keymap_global["U0-D"][key] = input_date(*args)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u5b9f\u884c\u3059\u308b\u3068\u3001\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u4e0b\u306b ",(0,i.jsx)(n.code,{children:"DATE: [1]YMD, [2]Y/M/D, [3]Y-M-D"})," \u304c\u8868\u793a\u3055\u308c\u3001\u6b21\u306e\u30ad\u30fc\u5165\u529b\u5f85\u3061\u306b\u306a\u308a\u307e\u3059\uff0e\u3053\u3053\u3067\u306f ",(0,i.jsx)(n.code,{children:"1"}),"\u3001",(0,i.jsx)(n.code,{children:"2"}),"\u3001",(0,i.jsx)(n.code,{children:"3"}),"\u30ad\u30fc\u306e\u3069\u308c\u304b\u3092\u62bc\u3059\u3068\u3001\u305d\u308c\u305e\u308c\u306e\u66f8\u5f0f\u306b\u5bfe\u5fdc\u3057\u305f\u65e5\u4ed8\u304c\u5165\u529b\u3055\u308c\u307e\u3059\uff0e"]}),"\n",(0,i.jsxs)(n.p,{children:["\u4ed6\u306b\u3001\u62ec\u5f27\u306e\u5165\u529b\u652f\u63f4\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e(",(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"P"}),"\u30ad\u30fc)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'def send_string(s):\n    keymap.beginInput()\n    keymap.setInput_Modifier(0)\n    for c in s:\n        keymap.input_seq.append(pyauto.Char(c))\n    keymap.endInput()\n\ndef send_input(sequence, sleep=0.01):\n    for elem in sequence:\n        delay(sleep)\n        try:\n            send_keys(elem)\n        except:\n            send_string(elem)\n\ndef ime_input0(*sequence):\n    def _ime_input0():\n        set_ime(0)\n        send_input(sequence)\n\n    return _ime_input0\n\ndef ime_input1(*sequence):\n    def _ime_input1():\n        set_ime(1)\n        send_input(sequence)\n\n    return _ime_input1\n\nkeymap_global["U0-P"] = keymap.defineMultiStrokeKeymap("PARENTHES: [1]\u300a\u300b [2]\u3008\u3009 [3]\u3014\u3015 [4]\u300e\u300f [5]\u3010\u3011 [6]\uff08\uff09 [7]()")\nfor key, args in {\n    "1": ["\u300a\u300b", "Left"],\n    "2": ["\u3008\u3009", "Left"],\n    "3": ["\u3014\u3015", "Left"],\n    "4": ["\u300e\u300f", "Left"],\n    "5": ["\u3010\u3011", "Left"],\n    "6": ["\uff08\uff09", "Left"],\n    "7": ["()", "Left"],\n}.items():\n    keymap_global["U0-P"][key] = ime_input1(*args)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u65e5\u672c\u8a9e\u5165\u529b\u6642\u306b\u534a\u89d2\u306e\u62ec\u5f27\u3092\u5165\u308c\u308b",children:"\u65e5\u672c\u8a9e\u5165\u529b\u6642\u306b\u534a\u89d2\u306e\u62ec\u5f27\u3092\u5165\u308c\u308b"}),"\n",(0,i.jsxs)(n.p,{children:["\u901a\u5e38\u306f\u5168\u89d2\u306e\u62ec\u5f27(",(0,i.jsx)(n.code,{children:"\uff08\uff09"}),")\u3067\u3059\u304c\u3001\u534a\u89d2\u3092\u5165\u308c\u308b\u3088\u3046\u306b\u3067\u304d\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'def ime_context(func):\n    def _ime_context():\n        mode = keymap.getWindow().getImeStatus()\n        func()\n        set_ime(mode)\n\n    return _ime_context\n\nkeymap_global["U0-8"] = ime_context(ime_input0("S-8"))\nkeymap_global["U0-9"] = ime_context(ime_input0("S-9"))\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"8"}),"\u30ad\u30fc\u3067",(0,i.jsx)(n.code,{children:"("}),"\u304c\u3001",(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"9"}),"\u30ad\u30fc\u3067",(0,i.jsx)(n.code,{children:")"}),"\u304c\u65e5\u672c\u8a9e\u5165\u529b\u6642\u306b\u5165\u308c\u3089\u308c\u307e\u3059\uff0e"]}),"\n",(0,i.jsxs)(n.p,{children:["\u540c\u3058\u3084\u308a\u65b9\u3067\u3001",(0,i.jsx)(n.code,{children:"\uff0f"}),"\u3092",(0,i.jsx)(n.code,{children:"/"}),"\u3001",(0,i.jsx)(n.code,{children:"\u300c\u300d"}),"\u3092",(0,i.jsx)(n.code,{children:"[]"}),"\u3068\u5165\u529b\u3067\u304d\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'keymap_global["U0-OpenBracket"] = ime_context(ime_input0("OpenBracket"))\nkeymap_global["U0-CloseBracket"] = ime_context(ime_input0("CloseBracket"))\nkeymap_global["U0-Slash"] = ime_context(ime_input0("Slash"))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30bf\u30eb\u30b5\u30fc\u30c1",children:"\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30bf\u30eb\u30b5\u30fc\u30c1"}),"\n",(0,i.jsxs)(n.p,{children:["Keyhac\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306b\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30bf\u30eb\u30b5\u30fc\u30c1\u3092\u4f7f\u3048\u308b\u306e\u3067\u3059\u304c\u3001\u691c\u7d22\u30e2\u30fc\u30c9(",(0,i.jsx)(n.code,{children:"f"}),"\u30ad\u30fc)\u306b\u5165\u3089\u306a\u3044\u3068\u4f7f\u3048\u306a\u3044\u306e\u3067\u4e0d\u4fbf\u3067\u3059\uff0e\u305d\u3053\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306b\u81ea\u52d5\u3067\u691c\u7d22\u30e2\u30fc\u30c9\u306b\u5165\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u306e\u3067\u3059\u304c\u3067\u304d\u307e\u305b\u3093\uff0e\u307e\u305f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u4e2d\u592e\u306b\u8868\u793a\u3057\u3066\u307b\u3057\u3044\u306e\u3067\u3059\u304c\u3001\u6a19\u6e96\u3067\u306f\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u539f\u70b9(\u3064\u307e\u308a\u5de6\u4e0a)\u306b\u8868\u793a\u3055\u308c\u307e\u3059\uff0e\u3053\u308c\u304c\u3068\u3066\u3082\u4e0d\u6e80\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u306a\u3093\u3068\u304b\u59a5\u5354\u3067\u304d\u308b\u30ec\u30d9\u30eb\u306b\u3067\u304d\u307e\u3057\u305f\uff0e\u305d\u308c\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3059\u308b\u30ad\u30fc\u30922\u56de\u9023\u7d9a\u3067\u62bc\u3059\u3053\u3068\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4e2d\u592e\u306b\u79fb\u52d5\u3057\u3066\u3001\u691c\u7d22\u30e2\u30fc\u30c9\u306b\u5165\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3059\uff0e\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'def lw_search():\n    ikey("F")()\n    lw_search_mode = True\n\ndef lw_exit():\n    if lw_search_mode:\n        ikey("Esc", "Esc")()\n    else:\n        ikey("Esc")()\n\ndef is_list_window(window):\n    if window.getClassName() == "KeyhacWindowClass" and window.getText() != "Keyhac":\n        lw_search_mode = False\n        return True\n    else:\n        return False\n\nkeymap_lw = keymap.defineWindowKeymap(check_func=is_list_window)\nkeymap_lw["U0-N"] = ikey("Down")\nkeymap_lw["U0-P"] = ikey("Up")\nkeymap_lw["U0-AtMark"] = lambda: [window_to_center(), lw_search()]\nkeymap_lw["U0-Space"] = lambda: [window_to_center(), lw_search()]\nkeymap_lw["U0-Semicolon"] = lambda: [window_to_center(), lw_search()]\nkeymap_lw["Enter"] = ikey("Enter", "Enter")\nkeymap_lw["Escape"] = lw_exit\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"keymap_lw"}),"\u306fKeyhac\u304c\u8868\u793a\u3059\u308b\u30ea\u30b9\u30c8\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u9069\u7528\u3055\u308c\u308b\u30ad\u30fc\u30de\u30c3\u30d7\u3067\u3059\uff0e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3059\u308b\u30ad\u30fc\u306b ",(0,i.jsx)(n.code,{children:"lambda: [window_to_center(), lw_search()]"})," \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4e2d\u592e\u306b\u8868\u793a\u3057\u3001\u691c\u7d22\u30e2\u30fc\u30c9\u306b\u5165\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e"]}),"\n",(0,i.jsxs)(n.p,{children:["\u691c\u7d22\u30e2\u30fc\u30c9\u3067\u306f\u3001",(0,i.jsx)(n.code,{children:"Enter"}),"\u30ad\u30fc\u3092\u62bc\u3059\u3068\u3001\u691c\u7d22\u30e2\u30fc\u30c9\u304c\u7d42\u4e86\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u30012\u56de",(0,i.jsx)(n.code,{children:"Enter"}),"\u30ad\u30fc\u3092\u62bc\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\uff0e"]}),"\n",(0,i.jsxs)(n.p,{children:["\u307e\u305f\u3001",(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"N"}),"\u30ad\u30fc\u307e\u305f\u306f",(0,i.jsx)(n.code,{children:"P"}),"\u30ad\u30fc\u3067\u4e0a\u4e0b\u306b\u30ab\u30fc\u30bd\u30eb\u304c\u79fb\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\uff0e\u4ed6\u306b",(0,i.jsx)(n.code,{children:"Escape"}),"\u30ad\u30fc\u306e\u51e6\u7406\u3092\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u3082\u691c\u7d22\u30e2\u30fc\u30c9\u304b\u3089\u629c\u3051\u308b\u3060\u3051\u306a\u306e\u3067\u30012\u56de\u62bc\u3057\u305f\u3053\u3068\u306b\u3057\u3066\u3044\u307e\u3059"]}),"\n",(0,i.jsx)(n.h3,{id:"\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8",children:"\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:"@"}),"\u30ad\u30fc\u3092\u62bc\u3057\u3066\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u3092\u8868\u793a\u3057\u307e\u3059\uff0e\u5404\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u88c5\u306f\u3001\u3053\u306e\u30da\u30fc\u30b8\u306e\u6700\u5f8c\u306b\u3042\u308a\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'def command_PopCommandList():\n    # If the list window is already opened, just close it\n    if keymap.isListWindowOpened():\n        keymap.cancelListWindow()\n        return\n\n    def popCommandList():\n        commands = [\n            ("  :splitlines_with_period", splitlines_with_period),\n            ("  :remove_bullet", remove_bullet),\n            ("  :remove_breaklines", remove_breaklines),\n            ("  :remove_breaklines_with_trim", remove_breaklines_with_trim),\n            ("  :replace_zenkaku_punctuation", replace_zenkaku_punctuation),\n            ("1 :stanza_runner", stanza_runner),\n            ("  :stanza_displacy", stanza_displacy),\n            ("  :number_to_half_width", number_to_half_width),\n            ("  :number_to_full_width", number_to_full_width),\n            ("  :url_encode", url_encode),\n            ("  :url_decode", url_decode),\n            ("  :uuid", gen_uuid),\n            ("  :uuid8", gen_uuid8),\n            ("  :config(edit)", keymap.command_EditConfig),\n            ("  :config(reload)", keymap.command_ReloadConfig),\n            ("  :convert_google_drive_image_url", convert_google_drive_image_url),\n            ("  ^since:today", itext("since:" + date_and_time("%Y-%m-%d", 0))),\n            ("  ^since:yesterday", itext("since:" + date_and_time("%Y-%m-%d", -1))),\n        ]\n\n        listers = [("Command", cblister_FixedPhrase(commands))]\n\n        item, mod = keymap.popListWindow(listers)\n\n        if item:\n            item[1]()\n\n    # Because the blocking procedure cannot be executed in the key-hook,\n    # delayed-execute the procedure by delayedCall().\n    keymap.delayedCall(popCommandList, 0)\n\nkeymap_global["U0-AtMark"] = command_PopCommandList\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(87497).Z+"",width:"400",height:"509"})}),"\n",(0,i.jsxs)(n.p,{children:["\u5de5\u592b\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u306f ",(0,i.jsx)(n.code,{children:"1 :stanza_runner"})," \u3068\u3044\u3046\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3057\u305f\u3089",(0,i.jsx)(n.code,{children:"1"}),"\u30ad\u30fc\u3092\u62bc\u3059\u3068\u305d\u306e\u30b3\u30de\u30f3\u30c9\u304c\u9078\u629e\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\uff0e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3067\u3059\u306d\uff0e"]}),"\n",(0,i.jsxs)(n.p,{children:["\u3042\u3068\u3001\u30b3\u30de\u30f3\u30c9\u540d\u3067\u306f ",(0,i.jsx)(n.code,{children:"^xxx"})," \u3067\u5b9a\u578b\u6587\u3092\u3001",(0,i.jsx)(n.code,{children:":xxx"}),"\u306f\u305d\u308c\u4ee5\u5916\u306b\u5206\u985e\u3057\u3066\u3044\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.p,{children:"\u4ee5\u4e0b\u306e2\u3064\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u305d\u308c\u305e\u308c\u3001\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u7de8\u96c6\u3001\u518d\u8aad\u307f\u8fbc\u307f\u3092\u3057\u307e\u3059\uff0e\u7279\u306b\u8a2d\u5b9a\u3092\u7de8\u96c6\u3057\u3066\u518d\u8aad\u307f\u8fbc\u307f\u306f\u983b\u7e41\u306b\u5229\u7528\u3057\u307e\u3059\uff0e"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"keymap.command_EditConfig"}),"\n",(0,i.jsx)(n.li,{children:"keymap.command_ReloadConfig"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u5c65\u6b74",children:"\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u5c65\u6b74"}),"\n",(0,i.jsxs)(n.p,{children:["Keyhac\u3067\u306f\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u5c65\u6b74\u306e\u6a5f\u80fd\u304c\u6a19\u6e96\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\u306b",(0,i.jsx)(n.code,{children:"\u30d5\u30c3\u30af"}),"\u3092\u6709\u52b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001\u30b7\u30b9\u30c6\u30e0\u30c8\u30ec\u30a4\u304b\u3089Keyhac\u30a2\u30a4\u30b3\u30f3\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3066\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff0e\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u5c65\u6b74\u306e\u8a2d\u5b9a\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"# Enable clipboard monitoring hook (Default:Enabled)\nkeymap.clipboard_history.enableHook(True)\n\n# Maximum number of clipboard history (Default:1000)\nkeymap.clipboard_history.maxnum = 10\n\n# Total maximum size of clipboard history (Default:10MB)\nkeymap.clipboard_history.quota = 10 * 1024 * 1024\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u521d\u671f\u8a2d\u5b9a\u306e\u72b6\u614b\u3060\u3068\u3001\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u5c65\u6b74\u306f ",(0,i.jsx)(n.code,{children:"Ctrl+Shift+Z"}),"\u30ad\u30fc\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'# Open the clipboard history list\nkeymap_global["C-S-Z"] = keymap.command_ClipboardList\n# Move the most recent history to tail\nkeymap_global["C-S-X"] = keymap.command_ClipboardRotate\n# Remove the most recent history\nkeymap_global["C-S-A-X"] = keymap.command_ClipboardRemove\n# Mark for quote pasting\nkeymap.quote_mark = "> "\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u305f\u3060\u3001\u6a19\u6e96\u306e\u8a2d\u5b9a\u3067\u306f\u3068\u3066\u3082\u4f7f\u3044\u3065\u3089\u3044\u3068\u611f\u3058\u307e\u3057\u305f\uff0e\u74b0\u5883\u306b\u3088\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u5c65\u6b74\u304b\u3089\u306e\u76f4\u63a5\u8cbc\u308a\u4ed8\u3051\u304c(",(0,i.jsx)(n.code,{children:"Shift+Enter"}),"\u30ad\u30fc)\u304c\u52b9\u304b\u305a\u306b\u56f0\u308a\u307e\u3057\u305f\uff0e\u307e\u305f\u3001\u6570\u5b57\u306b\u3088\u308b\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3082\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u81ea\u524d\u3067\u5b9f\u88c5\u3057\u307e\u3059\uff0e\u5e78\u3044\u306a\u3053\u3068\u306b\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u5c65\u6b74\u81ea\u4f53\u306f\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u306e\u3067\u3001\u3042\u3068\u306f\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u3068\u540c\u3058\u3084\u308a\u65b9\u3067\u5b9f\u88c5\u3057\u307e\u3059\uff0e\u3064\u3044\u3067\u306b\u3001\u5b9a\u578b\u6587\u6a5f\u80fd\u3082\u8ffd\u52a0\u3057\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'phrase = []\nphrase.append(("name", "snippet code here"))\n\ndef paste_string(s):\n    setClipboardText(s)\n    send_keys("C-V")\n\ndef command_PopHistoryList():\n    # If the list window is already opened, just close it\n    if keymap.isListWindowOpened():\n        keymap.cancelListWindow()\n        return\n\n    def popHistoryList():\n        def direct_paste(s):\n            def _direct_paste():\n                paste_string(s)\n\n            return _direct_paste\n\n        histories = []\n        items = keymap.clipboard_history.getListItems()\n        for i, item in enumerate(items):\n            histories.append(("{}: {}".format((i + 1) % 10, item[0]), direct_paste(item[1])))\n        for i, item in enumerate(phrase):\n            histories.append(("{}: {}".format(chr(ord("a") + i), item[0]), direct_paste(item[1])))\n\n        listers = [("Clipboard", cblister_FixedPhrase(histories))]\n        item, mod = keymap.popListWindow(listers)\n        if item:\n            item[1]()\n\n    # Because the blocking procedure cannot be executed in the key-hook,\n    # delayed-execute the procedure by delayedCall().\n    keymap.delayedCall(popHistoryList, 0)\n\nkeymap_global["U0-Semicolon"] = command_PopHistoryList\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u79c1\u306f",(0,i.jsx)(n.code,{children:"\u7121\u5909\u63db"}),"\u30ad\u30fc\u3068",(0,i.jsx)(n.code,{children:";"}),"\u30ad\u30fc\u3067\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\u6b21\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(37751).Z+"",width:"568",height:"389"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"phrase"}),"\u5909\u6570\u3067\u5b9a\u578b\u6587\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\uff0e\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u5c65\u6b74\u306f\u6570\u5b57\u3067\u3001\u5b9a\u578b\u6587\u306f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u306b\u306a\u308a\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.h2,{id:"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb",children:"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb"}),"\n",(0,i.jsx)(n.p,{children:"\u6700\u5f8c\u306b\u79c1\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u629c\u7c8b\u3067\u3059\uff0e"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"title=config.py",children:'import os\nimport datetime\nimport time\nimport re\nimport unicodedata\nimport urllib\nimport uuid\nimport pyauto\nfrom keyhac import setClipboardText, getClipboardText, cblister_FixedPhrase, JobItem, JobQueue, Window\n\ndef configure(keymap):\n    class MySetting:\n        def __init__(self):\n            self.chrome_history = []\n            self.debug = False\n            self.lw_search_mode = False\n            self.phrase = []\n\n    mysetting = MySetting()\n\n    # Phrase\n    # mysetting.phrase.append(("name", "snippet code here"))\n\n    # User Define Functions\n\n    def dbg(text):\n        if mysetting.debug:\n            print("dbg: " + text)\n\n    def itext(text):\n        return keymap.InputTextCommand(text)\n\n    def ikey(*keys):\n        return keymap.InputKeyCommand(*keys)\n\n    def shell(s, arg=None):\n        return keymap.ShellExecuteCommand(None, s, arg, None)\n\n    def shell_mini(s, arg=None):\n        return keymap.ShellExecuteCommand(None, s, arg, None, "minimized")\n\n    def delay(sec=0.05):\n        time.sleep(sec)\n\n    def get_current_clipboard():\n        s = getClipboardText() or ""\n        return s\n\n    def send_keys(*keys):\n        keymap.beginInput()\n        for key in keys:\n            keymap.setInput_FromString(str(key))\n        keymap.endInput()\n        keymap._fixFunnyModifierState()\n\n    def send_string(s):\n        keymap.beginInput()\n        keymap.setInput_Modifier(0)\n        for c in s:\n            keymap.input_seq.append(pyauto.Char(c))\n        keymap.endInput()\n\n    def send_input(sequence, sleep=0.01):\n        for elem in sequence:\n            delay(sleep)\n            try:\n                send_keys(elem)\n            except:\n                send_string(elem)\n\n    def set_ime(mode):\n        if keymap.getWindow().getImeStatus() != mode:\n            send_keys("(243)")\n            delay(0.01)\n\n    def copy_string(sec=0.01):\n        setClipboardText("")\n        send_keys("C-Insert")\n        delay(sec)\n        return get_current_clipboard()\n\n    def paste_string(s):\n        setClipboardText(s)\n        send_keys("C-V")\n\n    def ime_input0(*sequence):\n        def _ime_input0():\n            set_ime(0)\n            send_input(sequence)\n\n        return _ime_input0\n\n    def ime_input1(*sequence):\n        def _ime_input1():\n            set_ime(1)\n            send_input(sequence)\n\n        return _ime_input1\n\n    def ime_context(func):\n        def _ime_context():\n            mode = keymap.getWindow().getImeStatus()\n            func()\n            set_ime(mode)\n\n        return _ime_context\n\n    def set_cursor_pos(x, y):\n        keymap.beginInput()\n        keymap.input_seq.append(pyauto.MouseMove(x, y))\n        keymap.endInput()\n\n    def cursor_to_center():\n        wnd = keymap.getTopLevelWindow()\n        wnd_left, wnd_top, wnd_right, wnd_bottom = wnd.getRect()\n        to_x = int((wnd_left + wnd_right) / 2)\n        to_y = int((wnd_bottom + wnd_top) / 2)\n        set_cursor_pos(to_x, to_y)\n\n    def get_monitor_areas():\n        monitors = pyauto.Window.getMonitorInfo()\n        main_monitor_first = sorted(monitors, key=lambda x: x[2], reverse=True)\n        non_taskbar_areas = list(map(lambda x: x[1], main_monitor_first))\n        return non_taskbar_areas\n\n    def set_window_rect(rect):\n        wnd = keymap.getTopLevelWindow()\n        if list(wnd.getRect()) == rect:\n            wnd.maximize()\n        else:\n            if wnd.isMaximized():\n                wnd.restore()\n                delay()\n            wnd.setRect(rect)\n\n    def window_to_center_force():\n        wnd = keymap.getTopLevelWindow()\n        if wnd.isMaximized():\n            wnd.restore()\n            delay()\n        window_to_center()\n\n    def window_to_center():\n        wnd = keymap.getTopLevelWindow()\n        if wnd.isMaximized():\n            return None\n        wnd_left, wnd_top, wnd_right, wnd_bottom = wnd.getRect()\n        width = wnd_right - wnd_left\n        height = wnd_bottom - wnd_top\n        mntr_left, mntr_top, mntr_right, mntr_bottom = get_monitor_areas()[0]\n        center_h = (mntr_right - mntr_left) / 2\n        center_v = (mntr_bottom - mntr_top) / 2\n        lx = int(center_h - width / 2)\n        ly = int(center_v - height / 2)\n        to_rect = (lx, ly, lx + width, ly + height)\n        set_window_rect(to_rect)\n\n    def window_to_cursor():\n        wnd = keymap.getTopLevelWindow()\n        if wnd.isMaximized():\n            return None\n        wnd_left, wnd_top, wnd_right, wnd_bottom = wnd.getRect()\n        width = wnd_right - wnd_left\n        height = wnd_bottom - wnd_top\n        x, y = pyauto.Input.getCursorPos()\n        to_rect = (x, y, x + width, y + height)\n        set_window_rect(to_rect)\n\n    def find_window(pattern):\n        dbg(">>>>> find_window <<<<<")\n\n        def getWindowList(wnd, arg):\n            if not wnd.isVisible():\n                return True\n            # if not wnd.getOwner():\n            #     return True\n            if wnd.getText() == "":\n                return True\n            dbg(wnd.getProcessName())\n            dbg("  " + wnd.getClassName())\n            dbg("    " + wnd.getText())\n            if re.match(\n                r"{0}".format(pattern),\n                wnd.getProcessName(),\n            ):\n                dbg("(found)")\n                window_list.append(wnd)\n                return False\n            # if re.match(r"chrome", wnd.getClassName()):m\n            #     windom_list.append(wnd)\n            return True\n\n        window_list = []\n        Window.enum(getWindowList, pattern)\n\n        if len(window_list) > 0:\n            return window_list[0]\n\n        dbg("(not found.)")\n        return None\n\n    def foreground_window(wnd):\n        dbg(">>>>> foreground_window <<<<<")\n        if wnd.isMinimized():\n            wnd.restore()\n            delay()\n        wnd.setForeground()\n\n    full_width_chars = (\n        "\uff41\uff42\uff43\uff44\uff45\uff46\uff47\uff48\uff49\uff4a\uff4b\uff4c\uff4d\uff4e\uff4f\uff50\uff51\uff52\uff53\uff54\uff55\uff56\uff57\uff58\uff59\uff5a\uff21\uff22\uff23\uff24\uff25\uff26\uff27\uff28\uff29\uff2a\uff2b\uff2c\uff2d\uff2e\uff2f\uff30\uff31\uff32\uff33\uff34\uff35\uff36\uff37\uff38\uff39\uff3a\uff01\u201d\uff03\uff04\uff05\uff06\u2019\uff08\uff09\uff0a\uff0b\uff0c\u2212\uff0e\uff0f\uff1a\uff1b\uff1c\uff1d\uff1e\uff1f\uff20\uff3b\uffe5\uff3d\uff3e\uff3f\u2018\uff5b\uff5c\uff5d\uff5e\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19\u3000"\n    )\n    half_width_chars = (\n        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}\uff5e0123456789 "\n    )\n\n    # Convert to half-with characters\n    def to_half_width_clipboard_text():\n        s = getClipboardText()\n        s = s.translate(str.maketrans(full_width_chars, half_width_chars))\n        return s\n\n    # Convert to full-with characters\n    def to_full_width_clipboard_text():\n        s = getClipboardText()\n        s = s.translate(str.maketrans(half_width_chars, full_width_chars))\n        return s\n\n    # Convert to half-with characters\n    def number_to_half_width():\n        s = getClipboardText()\n        s = s.translate(str.maketrans("\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19", "0123456789"))\n        paste_string(s)\n\n    # Convert to full-with characters\n    def number_to_full_width():\n        s = getClipboardText()\n        s = s.translate(str.maketrans("0123456789", "\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19"))\n        paste_string(s)\n\n    # Convert to emoji numbers\n    def to_emoji():\n        # emoji = {\n        #     ".0": "0\ufe0f\u20e3",\n        #     ".1": "1\ufe0f\u20e3",\n        #     ".2": "2\ufe0f\u20e3",\n        #     ".3": "3\ufe0f\u20e3",\n        #     ".4": "4\ufe0f\u20e3",\n        #     ".5": "5\ufe0f\u20e3",\n        #     ".6": "6\ufe0f\u20e3",\n        #     ".7": "7\ufe0f\u20e3",\n        #     ".8": "8\ufe0f\u20e3",\n        #     ".9": "9\ufe0f\u20e3",\n        #     ".#": "#\ufe0f\u20e3",\n        #     ".*": "*\ufe0f\u20e3",\n        #     ".!": "\u2705",\n        #     ".a": "\ud83d\udccc",\n        #     ".b": "\ud83d\udcd6",\n        #     ".c": "\ud83d\udcc1",\n        #     ".d": "\ud83d\udca1",\n        #     ".e": "\ud83d\udd38",\n        #     ".f": "\ud83d\udd39",\n        #     ".g": "\u26a0\ufe0f",\n        #     ".h": "\u26a1\ufe0f",\n        #     ".i": "\u2b50\ufe0f",\n        #     ".j": "\ud83d\udd25",\n        # }\n        # # emoji = {k: v.strip("\\ufe0f") for k, v in emoji.items()}\n        # s = getClipboardText()\n        # # s = s.translate(str.maketrans(emoji))\n        # pairs = re.split("(..)", s)[1::2]\n        # s = "".join(emoji.get(pair, "") for pair in pairs)\n        # paste_string(s)\n        #\n        # \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u306f\u4e0a\u624b\u304f\u3044\u304b\u306a\u3044\u306e\u3067PowerShell\u3067\u5b9f\u884c.\n        # (setClipboardText\u3059\u308b\u3068\u304a\u304b\u3057\u304f\u306a\u308b)\n        shell_mini("pwsh.exe", \'-nop -f "C:\\\\Users\\\\{user}\\\\convert_to_emoji.ps1"\')()\n\n    def url_encode():\n        paste_string(urllib.parse.quote(getClipboardText(), safe=""))\n\n    def url_decode():\n        paste_string(urllib.parse.unquote(getClipboardText()))\n\n    def next_chrome_window():\n        dbg(">>>>> next_chrome_window <<<<<")\n\n        def getWindowList(wnd, arg):\n            if not wnd.isVisible():\n                return True\n            # if not wnd.getOwner():\n            #     return True\n            if wnd.getText() == "":\n                return True\n            # dbg(wnd.getProcessName())\n            if re.match(r"chrome", wnd.getProcessName()):\n                window_list.append(wnd)\n            # if re.match(r"chrome", wnd.getClassName()):\n            #     window_list.append(wnd)\n            # window_list.append(wnd)\n            return True\n\n        now = time.time_ns() / 1_000_000  # ms\n        history = sorted(mysetting.chrome_history, key=lambda x: x[1], reverse=True)\n        if len(history) > 0:\n            dbg("{}".format(now - history[0][1]))\n            if now - history[0][1] > 5_000:  # 5s\n                dbg("clear chrome history")\n                mysetting.chrome_history = []\n                history = []\n\n        if mysetting.debug:\n            for entry in history:\n                dbg(f"{entry[0]}, {entry[1]}")\n\n        next_window = (None, -1)\n        window_list = []\n        Window.enum(getWindowList, None)\n        current_wnd_text = keymap.getTopLevelWindow().getText()\n        dbg(f"[current] {current_wnd_text}")\n        for wnd in window_list:\n            text = wnd.getText()\n            if current_wnd_text == text:\n                continue\n            idx = [i for i, e in enumerate(history) if e[0] == text]\n            if len(idx) > 0:\n                if next_window[1] < idx[0]:\n                    dbg(f"found in history: {text}({idx[0]})")\n                    next_window = (wnd, idx[0])\n            else:\n                dbg(f"not found in history: {text}")\n                next_window = (wnd, len(history))\n                break\n\n        if next_window[0]:\n            dbg("[next] " + next_window[0].getText())\n            mysetting.chrome_history.append((next_window[0].getText(), now))\n            next_window[0].setForeground()\n\n    def truncate(string, length, ellipsis="..."):\n        return string[:length] + (ellipsis if string[length:] else "")\n\n    def truncate_cjk(string, length, ellipsis="..."):\n        # http://www.unicode.org/reports/tr11/\n        count = 0\n        text = ""\n        for c in string:\n            if unicodedata.east_asian_width(c) in "FWA":\n                count += 2\n            else:\n                count += 1\n\n            if count > length:\n                text += ellipsis\n                break\n            text += c\n        return text\n\n    def switch_windows():\n        dbg(">>>>> switch_windows <<<<<")\n\n        def popWindowList():\n            # If the list window is already opened, just close it\n            if keymap.isListWindowOpened():\n                keymap.cancelListWindow()\n                return\n\n            def getWindowList(wnd, arg):\n                if not wnd.isVisible():\n                    return True\n                # if not wnd.getOwner():\n                #     return True\n                if wnd.getText() == "":\n                    return True\n                dbg(wnd.getProcessName())\n                dbg("  " + wnd.getClassName())\n                dbg("    " + wnd.getText())\n                if re.match(\n                    r"(keyhac|DesktopTicker|SystemSettings|ApplicationFrameHost|TextInputHost|explorer|onenoteim)\\.exe",\n                    wnd.getProcessName(),\n                ):\n                    dbg("(pass)")\n                    return True\n                # if re.match(r"chrome", wnd.getClassName()):\n                #     window_list.append(wnd)\n                window_list.append(wnd)\n                return True\n\n            window_list = []\n            Window.enum(getWindowList, None)\n\n            popup_list = [\n                ("{:>20s} :: {}".format(truncate(i.getProcessName()[:-4], 17), truncate_cjk(i.getText(), 45)), i)\n                for i in sorted(window_list, key=lambda x: x.getProcessName())\n            ]\n\n            if mysetting.debug:\n                for i in popup_list:\n                    dbg(i[0])\n\n            listers = [("Windows", cblister_FixedPhrase(popup_list))]\n            item, mod = keymap.popListWindow(listers)\n            if item:\n                item[1].setForeground()\n\n        # Because the blocking procedure cannot be executed in the key-hook,\n        # delayed-execute the procedure by delayedCall().\n        keymap.delayedCall(popWindowList, 0)\n\n\n\n    # Setting with program file path (Simple usage)\n    keymap.editor = "code"\n\n    # Font\n    keymap.setFont("Sarasa Fixed Slab J Semibold", 24)\n\n    # Theme\n    keymap.setTheme("black")\n\n    # Simple key replacement\n    keymap.replaceKey("(29)", 235)  # \u7121\u5909\u63db\n    keymap.replaceKey("(28)", 236)  # \u5909\u63db\n\n    # User modifier key definition\n    keymap.defineModifier(235, "User0")\n    keymap.defineModifier(236, "User1")\n\n    # Global keymap which affects any windows\n    keymap_global = keymap.defineWindowKeymap()\n    keymap.quote_mark = "> "  # Mark for quote pasting\n\n    keymap_global["S-RCtrl"] = cursor_to_center\n    keymap_global["C-RCtrl"] = window_to_center\n    keymap_global["U0-RCtrl"] = window_to_cursor\n    keymap_global["U0-Space"] = switch_windows\n    keymap_global["U0-F7"] = next_chrome_window\n    keymap_global["U0-F8"] = window_to_center_force\n    keymap_global["U0-F9"] = shell(\n        "C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\Chrome.exe",\n        "--new-window https://www.google.com/webhp?hl=ja",\n    )\n    keymap_global["U0-Right"] = ikey("S-A-Right", "S-A-Right")\n\n    def switch_zulip():\n        wnd = find_window("^Zulip")\n        if wnd:\n            foreground_window(wnd)\n        else:\n            dbg("(start zulip.)")\n            shell("C:\\\\Users\\\\{user}\\\\AppData\\\\Local\\\\Programs\\\\zulip\\\\Zulip.exe")()\n\n    keymap_global["U0-M"] = switch_zulip\n    keymap_global["U0-P"] = keymap.defineMultiStrokeKeymap("PARENTHES: [1]\u300a\u300b [2]\u3008\u3009 [3]\u3014\u3015 [4]\u300e\u300f [5]\u3010\u3011 [6]\uff08\uff09 [7]()")\n    for key, args in {\n        "1": ["\u300a\u300b", "Left"],\n        "2": ["\u3008\u3009", "Left"],\n        "3": ["\u3014\u3015", "Left"],\n        "4": ["\u300e\u300f", "Left"],\n        "5": ["\u3010\u3011", "Left"],\n        "6": ["\uff08\uff09", "Left"],\n        "7": ["()", "Left"],\n    }.items():\n        keymap_global["U0-P"][key] = ime_input1(*args)\n\n    def input_date(fmt):\n        def _input_data():\n            d = datetime.datetime.today()\n            date_str = d.strftime(fmt)\n            set_ime(0)\n            send_input(date_str, 0)\n\n        return _input_data\n\n    keymap_global["U0-D"] = keymap.defineMultiStrokeKeymap("DATE: [1]YMD, [2]Y/M/D, [3]Y-M-D")\n    for key, args in {\n        "1": ["%Y%m%d"],\n        "2": ["%Y/%m/%d"],\n        "3": ["%Y-%m-%d"],\n    }.items():\n        keymap_global["U0-D"][key] = input_date(*args)\n\n    keymap_global["U0-8"] = ime_context(ime_input0("S-8"))\n    keymap_global["U0-9"] = ime_context(ime_input0("S-9"))\n    keymap_global["U0-OpenBracket"] = ime_context(ime_input0("OpenBracket"))\n    keymap_global["U0-CloseBracket"] = ime_context(ime_input0("CloseBracket"))\n    keymap_global["U0-Slash"] = ime_context(ime_input0("Slash"))\n\n    def splitlines_with_period():\n        s = get_current_clipboard()\n        s = s.replace("\\r\\n", "").split(".")\n        s = ".\\r\\n".join(list(map(str.strip, s)))\n        paste_string(s)\n\n    def remove_bullet():\n        paste_string(get_current_clipboard().replace(" \u2219 ", " ").replace("\u2219", ""))\n\n    def remove_breaklines():\n        paste_string(get_current_clipboard().replace("\\r\\n", ""))\n\n    def remove_breaklines_with_trim():\n        paste_string("".join(list(map(str.strip, get_current_clipboard().split("\\r\\n")))))\n\n    def replace_zenkaku_punctuation():\n        paste_string(get_current_clipboard().replace("\uff0e", "\u3002"))\n\n    def stanza_runner():\n        paste_string(\'p ./stanza_runner.py "{}"\'.format(get_current_clipboard().replace(\'"\', \'""\')))\n\n    def stanza_displacy():\n        paste_string(\'p ./stanza_displacy.py "{}"\'.format(get_current_clipboard().replace(\'"\', \'""\')))\n\n    def convert_google_drive_image_url():\n        # https://drive.google.com/open?id=XXXX&authuser=xxx.gmail.com&usp=drive_fs\n        # -> https://drive.google.com/file/d/XXXX/view\n        s = getClipboardText()\n        result = re.match("https://.+open\\?id=(\\w+)", s)\n        if result:\n            paste_string("https://drive.google.com/file/d/{0}/view".format(result.group(1)))\n\n    # Return formatted date-time string\n    def date_and_time(fmt, d):\n        return (datetime.datetime.now() + datetime.timedelta(d)).strftime(fmt)\n\n    def gen_uuid():\n        s = getClipboardText()\n        uid = str(uuid.uuid5(uuid.uuid1(), s))\n        paste_string(uid.replace("-", ""))\n\n    def gen_uuid8():\n        s = getClipboardText()\n        uid = str(uuid.uuid5(uuid.uuid1(), s))\n        paste_string(uid[0:8])\n\n    def command_PopCommandList():\n        # If the list window is already opened, just close it\n        if keymap.isListWindowOpened():\n            keymap.cancelListWindow()\n            return\n\n        def popCommandList():\n            commands = [\n                ("  :splitlines_with_period", splitlines_with_period),\n                ("  :remove_bullet", remove_bullet),\n                ("  :remove_breaklines", remove_breaklines),\n                ("  :remove_breaklines_with_trim", remove_breaklines_with_trim),\n                ("  :replace_zenkaku_punctuation", replace_zenkaku_punctuation),\n                ("1 :stanza_runner", stanza_runner),\n                ("  :stanza_displacy", stanza_displacy),\n                ("  :number_to_half_width", number_to_half_width),\n                ("  :number_to_full_width", number_to_full_width),\n                ("  :to_emoji", to_emoji),\n                ("  :url_encode", url_encode),\n                ("  :url_decode", url_decode),\n                ("  :uuid", gen_uuid),\n                ("  :uuid8", gen_uuid8),\n                ("  :config(edit)", keymap.command_EditConfig),\n                ("  :config(reload)", keymap.command_ReloadConfig),\n                ("  :convert_google_drive_image_url", convert_google_drive_image_url),\n                ("  ^since:today", itext("since:" + date_and_time("%Y-%m-%d", 0))),\n                ("  ^since:yesterday", itext("since:" + date_and_time("%Y-%m-%d", -1))),\n            ]\n\n            listers = [("Command", cblister_FixedPhrase(commands))]\n\n            item, mod = keymap.popListWindow(listers)\n\n            if item:\n                item[1]()\n\n        # Because the blocking procedure cannot be executed in the key-hook,\n        # delayed-execute the procedure by delayedCall().\n        keymap.delayedCall(popCommandList, 0)\n\n    keymap_global["U0-AtMark"] = command_PopCommandList\n\n    def command_PopHistoryList():\n        # If the list window is already opened, just close it\n        if keymap.isListWindowOpened():\n            keymap.cancelListWindow()\n            return\n\n        def popHistoryList():\n            def direct_paste(s):\n                def _direct_paste():\n                    paste_string(s)\n\n                return _direct_paste\n\n            histories = []\n            items = keymap.clipboard_history.getListItems()\n            for i, item in enumerate(items):\n                histories.append(("{}: {}".format((i + 1) % 10, item[0]), direct_paste(item[1])))\n            for i, item in enumerate(mysetting.phrase):\n                histories.append(("{}: {}".format(chr(ord("a") + i), item[0]), direct_paste(item[1])))\n\n            listers = [("Clipboard", cblister_FixedPhrase(histories))]\n            item, mod = keymap.popListWindow(listers)\n            if item:\n                item[1]()\n\n        # Because the blocking procedure cannot be executed in the key-hook,\n        # delayed-execute the procedure by delayedCall().\n        keymap.delayedCall(popHistoryList, 0)\n\n    keymap_global["U0-Semicolon"] = command_PopHistoryList\n\n    def lw_search():\n        ikey("F")()\n        mysetting.lw_search_mode = True\n\n    def lw_exit():\n        if mysetting.lw_search_mode:\n            ikey("Esc", "Esc")()\n        else:\n            ikey("Esc")()\n\n    def is_list_window(window):\n        if window.getClassName() == "KeyhacWindowClass" and window.getText() != "Keyhac":\n            mysetting.lw_search_mode = False\n            return True\n        else:\n            return False\n\n    keymap_lw = keymap.defineWindowKeymap(check_func=is_list_window)\n    keymap_lw["U0-N"] = ikey("Down")\n    keymap_lw["U0-P"] = ikey("Up")\n    keymap_lw["U0-AtMark"] = lambda: [window_to_center(), lw_search()]\n    keymap_lw["U0-Space"] = lambda: [window_to_center(), lw_search()]\n    keymap_lw["U0-Semicolon"] = lambda: [window_to_center(), lw_search()]\n    keymap_lw["Enter"] = ikey("Enter", "Enter")\n    keymap_lw["Escape"] = lw_exit\n\n    # Customizing clipboard history list\n\n    # Enable clipboard monitoring hook (Default:Enabled)\n    keymap.clipboard_history.enableHook(True)\n\n    # Maximum number of clipboard history (Default:1000)\n    keymap.clipboard_history.maxnum = 10\n\n    # Total maximum size of clipboard history (Default:10MB)\n    keymap.clipboard_history.quota = 10 * 1024 * 1024\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"{user}"}),"\u306f\u3001Windows\u306e\u30e6\u30fc\u30b6\u30fc\u540d\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\uff0e\u307e\u305f\u3001\u7d75\u6587\u5b57\u3092\u5909\u63db\u3059\u308bPowerShell\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",metastring:'title="convert_to_emoji.ps1"',children:'$emoji = @{\n    "0"= "0\ufe0f\u20e3"\n    "1"= "1\ufe0f\u20e3"\n    "2"= "2\ufe0f\u20e3"\n    "3"= "3\ufe0f\u20e3"\n    "4"= "4\ufe0f\u20e3"\n    "5"= "5\ufe0f\u20e3"\n    "6"= "6\ufe0f\u20e3"\n    "7"= "7\ufe0f\u20e3"\n    "8"= "8\ufe0f\u20e3"\n    "9"= "9\ufe0f\u20e3"\n    "#"= "#\ufe0f\u20e3"\n    "*"= "*\ufe0f\u20e3"\n    "!"= "\u2705"\n    "a"= "\ud83d\udccc"\n    "b"= "\ud83d\udcd6"\n    "c"= "\ud83d\udcc1"\n    "d"= "\ud83d\udca1"\n    "e"= "\ud83d\udd38"\n    "f"= "\ud83d\udd39"\n    "g"= "\u26a0\ufe0f"\n    "h"= "\u26a1\ufe0f"\n    "i"= "\u2b50\ufe0f"\n    "j"= "\ud83d\udd25"\n}\n$chars = Get-Clipboard\n$result = ""\nforeach ($_ in $chars.ToCharArray()) {\n    if ($emoji.ContainsKey("${_}")) {\n        $result += $emoji["${_}"];\n    } else {\n        $result += $_;\n    }\n}\nSet-Clipboard $result\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u4ee5\u4e0a\u3067\u3059\uff0eKeyhac\u306f\u3068\u3066\u3082\u4fbf\u5229\u306a\u306e\u3067\u3001\u8208\u5473\u304c\u3042\u308c\u3070\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff0e"})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},38627:(e,n,t)=>{t.d(n,{Z:()=>c});t(67294);var i=t(2735),r=t(86010),d=t(34791),s=t(38150),o=t(85893);function a(e){let{href:n,children:t}=e;return(0,o.jsx)(d.Z,{href:n,className:(0,r.Z)("card padding--md margin-bottom--sm",s.Z.cardContainer),children:t})}function l(e){let{href:n,icon:t,awesomeicon:i,title:d,description:l}=e;return(0,o.jsxs)(a,{href:n,children:[(0,o.jsxs)("span",{className:(0,r.Z)("text--truncate",s.Z.cardTitle),title:d,children:[(0,o.jsx)("i",{className:(0,r.Z)(s.Z.cardIcon,i),children:t})," ",d]}),l&&(0,o.jsx)("span",{className:(0,r.Z)("text--truncate",s.Z.cardDescription),title:l,children:l})]})}function c(e){let n,{name:t,url:r,description:d,image:s=""}=e,a="";return""===s?(0,i.Z)(r)?n="\ud83d\udcc4\ufe0f":r.startsWith("https://github.com")?(n="",a="fab fa-github"):(n="",a="fas fa-external-link-alt"):n=(0,o.jsx)("img",{style:{width:"32px"},src:s}),(0,o.jsx)("p",{children:(0,o.jsx)(l,{href:r,icon:n,awesomeicon:a,title:t,description:d})})}},86010:(e,n,t)=>{function i(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=i(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}t.d(n,{Z:()=>r});const r=function(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=i(e))&&(r&&(r+=" "),r+=n);return r}},38150:(e,n,t)=>{t.d(n,{Z:()=>i});const i={cardContainer:"cardContainer_yMBB",cardTitle:"cardTitle_SiGl",cardDescription:"cardDescription_fnmI",cardIcon:"cardIcon_VTdI",videoWrapper:"videoWrapper_xpwa",videoPlayer:"videoPlayer_IRVz"}},41038:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/keyhac-230127014527-0507f6dd57d63a86271b9fca19f5b40c.png"},87497:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/keyhac-230127023247-e1576f722275a925e177b0bf6786d821.png"},37751:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/keyhac-230127024747-50ec165f51545a51ef9dc54ccca2f79c.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var i=t(67294);const r={},d=i.createContext(r);function s(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);